{"ast":null,"code":"import _map from 'lodash/map';\nexport const restructureData = (dataset, preference) => {\n  const thread_0 = dataset === null || dataset === void 0 ? void 0 : dataset.data.slice(15, 22);\n\n  const labels = _map(thread_0, item => item[0]);\n\n  const datasets = [{\n    label: 'Algorithmic time for thread 0',\n    data: _map(thread_0, item => item[3]),\n    fill: false,\n    borderColor: 'green',\n    tension: 0.1\n  }, {\n    label: 'End to end run time for thread 0',\n    data: _map(thread_0, item => item[4]),\n    fill: false,\n    borderColor: 'darkblue',\n    tension: 0.1\n  }];\n  console.log(preference);\n  return {\n    labels: labels,\n    datasets: datasets\n  };\n};","map":{"version":3,"sources":["/Users/kushagrapathak/Documents/Web Projs/LetsHPC/letshpcjs/packages/app/src/utils/graph-utils.jsx"],"names":["_map","restructureData","dataset","preference","thread_0","data","slice","labels","item","datasets","label","fill","borderColor","tension","console","log"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,YAAjB;AAEA,OAAO,MAAMC,eAAe,GAAG,CAACC,OAAD,EAAUC,UAAV,KAAyB;AACvD,QAAMC,QAAQ,GAAGF,OAAH,aAAGA,OAAH,uBAAGA,OAAO,CAAEG,IAAT,CAAcC,KAAd,CAAoB,EAApB,EAAwB,EAAxB,CAAjB;;AACA,QAAMC,MAAM,GAAGP,IAAI,CAACI,QAAD,EAAYI,IAAD,IAAUA,IAAI,CAAC,CAAD,CAAzB,CAAnB;;AACA,QAAMC,QAAQ,GAAG,CAChB;AACCC,IAAAA,KAAK,EAAE,+BADR;AAECL,IAAAA,IAAI,EAAEL,IAAI,CAACI,QAAD,EAAYI,IAAD,IAAUA,IAAI,CAAC,CAAD,CAAzB,CAFX;AAGCG,IAAAA,IAAI,EAAE,KAHP;AAICC,IAAAA,WAAW,EAAE,OAJd;AAKCC,IAAAA,OAAO,EAAE;AALV,GADgB,EAQhB;AACCH,IAAAA,KAAK,EAAE,kCADR;AAECL,IAAAA,IAAI,EAAEL,IAAI,CAACI,QAAD,EAAYI,IAAD,IAAUA,IAAI,CAAC,CAAD,CAAzB,CAFX;AAGCG,IAAAA,IAAI,EAAE,KAHP;AAICC,IAAAA,WAAW,EAAE,UAJd;AAKCC,IAAAA,OAAO,EAAE;AALV,GARgB,CAAjB;AAgBAC,EAAAA,OAAO,CAACC,GAAR,CAAYZ,UAAZ;AACA,SAAO;AAAEI,IAAAA,MAAM,EAAEA,MAAV;AAAkBE,IAAAA,QAAQ,EAAEA;AAA5B,GAAP;AACA,CArBM","sourcesContent":["import _map from 'lodash/map'\n\nexport const restructureData = (dataset, preference) => {\n\tconst thread_0 = dataset?.data.slice(15, 22)\n\tconst labels = _map(thread_0, (item) => item[0])\n\tconst datasets = [\n\t\t{\n\t\t\tlabel: 'Algorithmic time for thread 0',\n\t\t\tdata: _map(thread_0, (item) => item[3]),\n\t\t\tfill: false,\n\t\t\tborderColor: 'green',\n\t\t\ttension: 0.1\n\t\t},\n\t\t{\n\t\t\tlabel: 'End to end run time for thread 0',\n\t\t\tdata: _map(thread_0, (item) => item[4]),\n\t\t\tfill: false,\n\t\t\tborderColor: 'darkblue',\n\t\t\ttension: 0.1\n\t\t}\n\t]\n\tconsole.log(preference)\n\treturn { labels: labels, datasets: datasets }\n}\n"]},"metadata":{},"sourceType":"module"}